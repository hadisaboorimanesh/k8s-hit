apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-$SERVICE_NAME
  namespace: $BRANCHE_NAME
  labels:
    app.kubernetes.io/name: frontend-$SERVICE_NAME-$BRANCHE_NAME
    image-tag: "$IMAGE_TAG"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend-$SERVICE_NAME-$BRANCHE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend-$SERVICE_NAME-$BRANCHE_NAME
        image-tag: "$IMAGE_TAG"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/name"
                  operator: In
                  values:
                    - frontend-$SERVICE_NAME-$BRANCHE_NAME
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - hit-dc1-g416
      restartPolicy: Always
      imagePullSecrets:
        - name: hasti-docker-repo
      containers:
        - image: $IMAGE_NAME
          name: frontend-$SERVICE_NAME
          command:
            - sh
            - -c
            - |
               pnpm add nx@14.8.8 typescript@4.6.4 @next/bundle-analyzer@^13.1.6 --ignore-scripts
               pnpm nx serve $SERVICE_NAME --configuration=production --hostname 0.0.0.0 --port "$TARGET_PORT"
          ports:
            - containerPort: $TARGET_PORT
              name: api
              protocol: TCP
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "0.5Gi"
              cpu: "0.5"
            limits:
              memory: "3Gi"
              cpu: "2"
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/health/status/
              port: api
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/health/status/
              port: api
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
