{{- if .Values.prometheus.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: {{ .Values.namespace }}
spec:
  serviceName: {{ .Values.prometheus.clusterName }}
  replicas: {{ .Values.prometheus.replicas }}
  # updateStrategy:
  #   type: RollingUpdate
  #   rollingUpdate:
  #     partition: 0  
  selector:
    matchLabels:
      app: prometheus
      thanos-store-api: "true"
  template:
    metadata:
      labels:
        app: prometheus
        thanos-store-api: "true"
      annotations:
        checksum/prometheus-rules.yaml: {{ include (print $.Template.BasePath "/prometheus-rules.yaml") . | sha1sum }}    
        checksum/prometheus-config.yaml: {{ include (print $.Template.BasePath "/prometheus-configmap.yaml") . | sha1sum }}  
    spec:
      terminationGracePeriodSeconds: 600
      serviceAccountName: monitoring
      containers:
        - name: prometheus
          image: {{ .Values.prometheus.image }}
          args:
            - "--config.file=/etc/prometheus-shared/prometheus.yaml"
            - "--storage.tsdb.path=/prometheus/"
            - "--web.enable-lifecycle"
            - "--storage.tsdb.no-lockfile"
            - "--storage.tsdb.min-block-duration=2h"
            - "--storage.tsdb.max-block-duration=2h"
            - "--storage.tsdb.retention.time=5d"
            - "--storage.tsdb.retention.size=50GB"
            - "--query.max-samples=100000000"
            - "--query.timeout=5m"
            - "--query.max-concurrency=20"
            - "--web.enable-admin-api"    
            - "--storage.tsdb.wal-compression"                    
          ports:
            - name: prometheus
              containerPort: 9090
          resources:
            {{- toYaml .Values.prometheus.resources | nindent 12 }}
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus/
            - name: prometheus-config-shared
              mountPath: /etc/prometheus-shared/
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
            - name: timezone-volume
              mountPath: /etc/timezone      
              readOnly: true
            - name: localtime-volume
              mountPath: /etc/localtime
              readOnly: true
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30              

        - name: thanos
          image: {{ .Values.thanos.image }}
          args:
            - sidecar
            - --log.level=debug
            - --tsdb.path=/prometheus
            - --prometheus.url=http://127.0.0.1:9090
            - "--objstore.config=$(S3_APPLICATION_CREDENTIALS)"
            - --reloader.config-file=/etc/prometheus/prometheus.yaml.tmpl
            - --reloader.config-envsubst-file=/etc/prometheus-shared/prometheus.yaml
            - --reloader.rule-dir=/etc/prometheus/rules/
            - --prometheus.ready_timeout=10m
            - --http-address=0.0.0.0:10902
            - --grpc-address=0.0.0.0:10901            
          env:
            - name: CLUSTER_NAME
              value: {{ .Values.prometheus.clusterName }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: S3_APPLICATION_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  key: thanos-s3-credentials.yaml
                  name: thanos-s3-credentials
          ports:
            - name: http-sidecar
              containerPort: 10902
            - name: grpc
              containerPort: 10901
          livenessProbe:
            httpGet:
              port: 10902
              path: /-/healthy
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30              
          readinessProbe:
            httpGet:
              port: 10902
              path: /-/ready
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 30
          resources:
            {{- toYaml .Values.thanos.query.resources | nindent 12 }}
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-config-shared
              mountPath: /etc/prometheus-shared/
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
            - name: thanos-s3-credentials
              mountPath: /etc/secret
              readOnly: true
            - name: timezone-volume
              mountPath: /etc/timezone   
              readOnly: true
            - name: localtime-volume
              mountPath: /etc/localtime    
              readOnly: true           
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      volumes:
        - name: timezone-volume
          hostPath:
            path: /etc/timezone
            type: File        
        - name: localtime-volume
          hostPath:
            path: /etc/localtime
            type: File       
        - name: prometheus-config
          configMap:
            defaultMode: 420
            name: prometheus-server-conf
        - name: prometheus-config-shared
          emptyDir: {}
        - name: prometheus-rules
          configMap:
            name: prometheus-rules
        - name: thanos-s3-credentials
          secret:
            secretName: {{ .Values.thanos.s3_secret }}
  volumeClaimTemplates:
  - metadata:
      name: prometheus-storage
      namespace: {{ .Values.namespace }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.storageClass.name }}
      resources:
        requests:
          storage: {{ .Values.prometheus.storage }}


---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
  name: promtheus
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 9090
    protocol: TCP
    targetPort: prometheus
    name: http
  selector:
    app: prometheus
---


apiVersion: v1
kind: Service
metadata:
  name: prometheus-headless
  namespace: {{ .Values.namespace }}
  labels:
    app: prometheus
    thanos-store-api: "true"
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for DNS discovery
  ports:
  - name: grpc
    port: 10901
    targetPort: grpc
  - name: http
    port: 10902
    targetPort: http-sidecar
  selector:
    app: prometheus
    thanos-store-api: "true"

{{- end }}

